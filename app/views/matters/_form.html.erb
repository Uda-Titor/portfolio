  <%= form_with(model: matter, local: true) do |form| %>
    <% if matter.errors.any? %>
    <div class="container">
      <div id="error_explanation" class="alert alert-danger" role="alert">
        <ul>
        <% matter.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
        </ul>
      </div>
    </div>
    <% end %>

<div class="container bg-color">
  <form>
    <div class="form-row">
      <div class="form-group col-md-10">
        <%= form.label :title %>　<span class="badge badge-danger">必須</span>
        <%= form.text_field :title, class: 'form-control', placeholder: "タイトルを入れてください" %>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-10">
        <%= form.label :content %>　<span class="badge badge-danger">必須</span>
        <%= form.text_area :content, class: 'form-control', placeholder: "要望内容を書いてください" %>
      </div>
    </div>

    <p>※該当項目にチェックを付けてください　<span class="badge badge-secondary">任意</span></p>
    <div class="form-row">
      <div class="form-group col-md-10">
        <%= form.collection_check_boxes :label_ids, Label.all, :id, :name do |b| %>
          <div class="form-check-inline">
            <strong><%= b.check_box + b.label { b.text } %></strong>
          </div>
        <% end %>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :images %>　<span class="badge badge-secondary">任意</span>
      <div id="file" class="input-group">
        <div class="custom-file">
          <%= form.file_field :images, multiple: true, id: "customfile" , class: 'custom-file-input' %>
          <label class="custom-file-label" for="customfile" data-browse="参照">ファイル選択...</label>
        </div>
        <div class="input-group-append">
            <button type="button" class="btn btn-outline-secondary reset">取消</button>
        </div>
      </div>
    </div>

    <script>
      $('.custom-file-input').on('change', handleFileSelect);
function handleFileSelect(evt) {
        $('#preview').remove();// 繰り返し実行時の処理
        $(this).parents('.input-group').after('<div id="preview"></div>');

    var files = evt.target.files;

    for (var i = 0, f; f = files[i]; i++) {

        var reader = new FileReader();

        reader.onload = (function(theFile) {
            return function(e) {
                if (theFile.type.match('image.*')) {
                    var $html = ['<div class="d-inline-block mr-1 mt-1"><img class="img-thumbnail" src="', e.target.result,'" title="', escape(theFile.name), '" style="height:100px;" /><div class="small text-color text-center">', escape(theFile.name),'</div></div>'].join('');// 画像では画像のプレビューとファイル名の表示
                } else {
                    var $html = ['<div class="d-inline-block mr-1"><span class="small">', escape(theFile.name),'</span></div>'].join('');//画像以外はファイル名のみの表示
                }

                $('#preview').append($html);
            };
        })(f);

        reader.readAsDataURL(f);
    }
    $(this).next('.custom-file-label').html(+ files.length + '個のファイルを選択しました');
}

//ファイルの取消
$('.reset').click(function(){
    $(this).parent().prev().children('.custom-file-label').html('ファイル選択...');
    $('#preview').remove();
    $('.custom-file-input').val('');
})
    </script>

    <div class="form-row">
      <div class="form-group col-md-2">
        <%= form.label :priority %>　<span class="badge badge-secondary">任意</span>
        <%= form.select :priority, [:高, :中, :低 ], {}, { class: 'form-control' }  %>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-10">
        <%= form.label :address %>　<span class="badge badge-secondary">任意</span>
        <%= form.text_field :address, class: 'form-control', placeholder: "要望箇所の住所を入れてください" %>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-3">
        <%= form.label :latitude %>
        <%= form.text_field :latitude, id: "target_latitude", class: 'form-control' %>
      </div>

      <div class="form-group col-md-3">
        <%= form.label :longitude %>
        <%= form.text_field :longitude, id: "target_longitude", class: 'form-control' %>
      </div>
    </div>
    ※GoogleMapへのマッピングに成功すると緯度・経度に値が入ります。

    <% if current_user.admin? %>
    <p>--以下は管理者のみ記入可能です。--</p>
      <div class="form-row">
        <div class="form-group col-md-3">
          <%= form.label :status %>
          <%= form.select :status, [["未着手"],["工事中"],["工事完了"]], { include_blank: "選択してください" }, { class: 'form-control' } %>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-2">
          <%= matter.mail_status %>
        </div>
        <div class="form-group col-5">
          <%= form.check_box :send_email ,{}, "true", "false" %>
          <%= form.label '工事完了メールを送信する' %>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-md-4">
          <%= form.label :start_time %>
          <%= form.date_field :start_time, class: 'form-control' %>
        </div>

        <div class="form-group col-md-4">
          <%= form.label :end_time %>
          <%= form.date_field :end_time, class: 'form-control' %>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-md-10">
          <%= form.label :remark %>
          <%= form.text_area :remark, class: 'form-control', placeholder: "備考を書いてください" %>
        </div>
      </div>

    <% end %>
    <div id="map"></div><!-- 地図を表示する div 要素（id="map"）-->
      <div class="actions">
        <%= form.submit '登録する',  class: 'btn btn-primary' %>
      </div>
  <% end %>
  <style>
  /* マップを表示する div 要素の高さを必ず明示的に指定します。 */
  #map {
    height: 400px;
    width: 600px;
  }
  </style>
  </form>
</div>


<script>
  var map;
  // 現在地取得処理
      function initMap() {
        // Geolocation APIに対応している
        if (navigator.geolocation) {
          // 現在地を取得
          navigator.geolocation.getCurrentPosition(
            // 取得成功した場合
            function(position) {
              // 緯度・経度を変数に格納
              var latitude = position.coords.latitude
              var longitude = position.coords.longitude
              var mapLatLng = new google.maps.LatLng(latitude, longitude);
              // マップオプションを変数に格納
              var mapOptions = {
                zoom : 15,          // 拡大倍率
                center : mapLatLng  // 緯度・経度
              };
              // マップオブジェクト作成
              var map = new google.maps.Map(
                document.getElementById("map"), // マップを表示する要素
                mapOptions         // マップオプション
              );
              //　マップにマーカーを表示する
              var marker = new google.maps.Marker({
                map : map,
                draggable: true,            // 対象の地図オブジェクト
                position : mapLatLng   // 緯度・経度
              });
              //マーカーのドロップ（ドラッグ終了）時のイベント
              google.maps.event.addListener(marker, 'dragend', function(e) {
                //イベントの引数eの、プロパティ.latLngがmarkerの緯度経度。
                document.getElementById( "target_latitude" ).value = e.latLng.lat(),
                document.getElementById( "target_longitude" ).value = e.latLng.lng()
              });
            },
            // 取得失敗した場合
            function(error) {
              // エラーメッセージを表示
              switch(error.code) {
                case 1: // PERMISSION_DENIED
                  alert("位置情報の利用が許可されていません");
                  break;
                case 2: // POSITION_UNAVAILABLE
                  alert("現在位置が取得できませんでした");
                  break;
                case 3: // TIMEOUT
                  alert("タイムアウトになりました");
                  break;
                default:
                  alert("その他のエラー(エラーコード:"+error.code+")");
                  break;
              }
            }
          );
        // Geolocation APIに対応していない
        } else {
          alert("この端末では位置情報が取得できません");
        }
      }
google.maps.event.addDomListener(window, 'load', initMap);
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV['APIKEY']%>&callback=initMap" async defer></script>
